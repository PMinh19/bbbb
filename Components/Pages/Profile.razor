@page "/profile"
@using BanSach.Components.Model
@inject CustomAuthStateProvider AuthenticationStateProvider
@using BanSach.Components.Data
@inject AppDbContext _dbContext
@inject IDialogService DialogService
@using System.Security.Claims
@using MudBlazor

<h3>Thông tin người dùng</h3>

@if (userInfo != null)
{
    <div>
        <p><strong>Email:</strong> @userInfo.Email</p>
        <p>
            <strong>Mật khẩu:</strong>
            @if (showPassword)
            {
                <span>@userInfo.Password</span>
            }
            else
            {
                <span>********</span>
            }
            <MudIconButton Icon="@Icons.Material.Filled.Visibility" OnClick="TogglePasswordVisibility" />
        </p>

        <!-- Password Change Form -->
        <h4>Đổi mật khẩu</h4>
        <MudTextField @bind-Value="oldPassword" Label="Mật khẩu cũ" Type="MudBlazor.InputType.Password" Required="true" />
        <MudTextField @bind-Value="newPassword" Label="Mật khẩu mới" Type="MudBlazor.InputType.Password" Required="true" />
        <MudTextField @bind-Value="confirmNewPassword" Label="Xác nhận mật khẩu mới" Type="MudBlazor.InputType.Password" Required="true" />
        <MudButton OnClick="ChangePassword" Color="Color.Primary">Đổi mật khẩu</MudButton>

        <!-- Hiển thị danh sách hóa đơn -->
        @if (orders != null && orders.Any())
        {
            <h4>Lịch sử hóa đơn</h4>
            <MudTable Items="orders" Striped="true" Hover="true">
                <HeaderContent>
                    <MudTh>Hóa đơn ID</MudTh>
                    <MudTh>Tổng giá trị</MudTh>
                    <MudTh>Trạng thái</MudTh>
                    <MudTh>Ngày tạo</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Hóa đơn ID">@context.BillId</MudTd>
                    <MudTd DataLabel="Tổng giá trị">@context.TotalPrice.ToString("C")</MudTd>
                    <MudTd DataLabel="Trạng thái">@context.Status</MudTd>
                    <MudTd DataLabel="Ngày tạo">@context.Created_at?.ToString("dd/MM/yyyy")</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <p>Chưa có hóa đơn nào.</p>
        }
    </div>
}
else
{
    <p>Đang tải thông tin...</p>
}
@code {
    private int userId;
    private User userInfo;
    private bool showPassword = false;
    private string oldPassword = "";
    private string newPassword = "";
    private string confirmNewPassword = "";
    private List<Bill> orders;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (int.TryParse(userIdClaim, out var parsedUserId))
        {
            userId = parsedUserId;
        }
        else
        {
            userId = 0;
        }

        userInfo = await GetUserInfo(userId);
        orders = await GetOrderHistory(userId);  // Lấy lịch sử hóa đơn của người dùng
    }

    private async Task<User> GetUserInfo(int userId)
    {
        try
        {
            var user = await _dbContext.Users
                .Where(u => u.UserId == userId)
                .FirstOrDefaultAsync();

            return user;
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Không thể tải thông tin người dùng: {ex.Message}");
            return null;
        }
    }

    private async Task<List<Bill>> GetOrderHistory(int userId)
    {
        try
        {
            var bills = await _dbContext.Bill
                .Where(b => b.UserID == userId)
                .ToListAsync();  // Lấy danh sách hóa đơn, không cần lấy thông tin chi tiết đơn hàng

            return bills;
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Không thể tải lịch sử hóa đơn: {ex.Message}");
            return new List<Bill>();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task ChangePassword()
    {
        if (string.IsNullOrWhiteSpace(newPassword) || newPassword != confirmNewPassword)
        {
            DialogService.ShowMessageBox("Lỗi", "Mật khẩu mới không hợp lệ hoặc xác nhận mật khẩu không khớp.");
            return;
        }

        if (userInfo.Password != oldPassword)  // You should compare with the hashed password in a real-world scenario.
        {
            DialogService.ShowMessageBox("Lỗi", "Mật khẩu cũ không đúng.");
            return;
        }

        // Hash the new password
        var newPasswordHash = HashPassword(newPassword);

        try
        {
            // Update password in the database
            userInfo.Password = newPassword;
            userInfo.PasswordHash = newPasswordHash.Hash;
            userInfo.PasswordSalt = newPasswordHash.Salt;
            userInfo.Updated = DateTime.Now;

            _dbContext.Users.Update(userInfo);
            await _dbContext.SaveChangesAsync();

            DialogService.ShowMessageBox("Thành công", "Mật khẩu đã được cập nhật.");
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Không thể đổi mật khẩu: {ex.Message}");
        }
    }

    private (byte[] Hash, byte[] Salt) HashPassword(string password)
    {
        using (var hmac = new System.Security.Cryptography.HMACSHA512())
        {
            var salt = hmac.Key;
            var hash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
            return (hash, salt);
        }
    }
}
