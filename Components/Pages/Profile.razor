@page "/profile"
@using BanSach.Components.Model
@inject CustomAuthStateProvider AuthenticationStateProvider
@using BanSach.Components.Data
@inject AppDbContext _dbContext
@inject IDialogService DialogService
@using System.Security.Claims
@using MudBlazor

<h3>Thông tin người dùng</h3>

@if (userInfo != null)
{
    <div>
        <p><strong>Email:</strong> @userInfo.Email</p>
        <p>
            <strong>Mật khẩu:</strong>
            @if (showPassword)
            {
                <span>@userInfo.Password</span>
            }
            else
            {
                <span>********</span>
            }
            <MudIconButton Icon="@Icons.Material.Filled.Visibility" OnClick="TogglePasswordVisibility" />
        </p>

        <!-- Hiển thị danh sách đơn đặt hàng -->
        <MudButton OnClick="ShowOrderHistory" Color="Color.Primary">Xem lịch sử đơn đặt hàng</MudButton>

        @if (orders != null && orders.Any())
        {
            <h4>Lịch sử đơn đặt hàng</h4>
            <MudTable Items="orders" Striped="true" Hover="true">
                <HeaderContent>
                    <MudTh>Đơn hàng</MudTh>
                    <MudTh>Ngày tạo</MudTh>
                    <MudTh>Tổng giá trị</MudTh>
                    <MudTh>Trạng thái</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Đơn hàng">@context.OrderCode</MudTd>
                    <MudTd DataLabel="Ngày tạo">@context.Created_at?.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Tổng giá trị">@context.TotalPrice.ToString("C")</MudTd>
                    <MudTd DataLabel="Trạng thái">@context.Status</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <p>Chưa có đơn hàng nào.</p>
        }
    </div>
}
else
{
    <p>Đang tải thông tin...</p>
}

@code {
    private int userId;
    private User userInfo;
    private bool showPassword = false;

    private List<Bill> orders;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (int.TryParse(userIdClaim, out var parsedUserId))
        {
            userId = parsedUserId;
        }
        else
        {
            userId = 0;
        }

        userInfo = await GetUserInfo(userId);
    }

    private async Task<User> GetUserInfo(int userId)
    {
        try
        {
            var user = await _dbContext.Users
                .Where(u => u.UserId == userId)
                .FirstOrDefaultAsync();

            return user;
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Không thể tải thông tin người dùng: {ex.Message}");
            return null;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task ShowOrderHistory()
    {
        // Lấy danh sách các đơn đặt hàng của người dùng
        orders = await _dbContext.Bill
            .Where(b => b.UserID == userId)
            .OrderByDescending(b => b.Created_at)
            .ToListAsync();
    }
}
